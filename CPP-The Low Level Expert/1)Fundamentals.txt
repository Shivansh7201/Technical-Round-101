1. Data Type Selection
Which data type would be most appropriate for storing a person's age?


Select one of the following options:
float
double
char
unsigned short int

Correct Answer:

unsigned short int
Explanation:
An unsigned short int is the most appropriate choice for storing a person's age. It's an integer type that can hold values from 0 to 65,535, which is more than sufficient for human age. Using float or double would be unnecessary as age doesn't require decimal precision. Char is too small, typically holding values from -128 to 127. The unsigned short int provides the right balance of memory efficiency and range for this use case.

2. Operator Precedence
What is the output of the following code?

int x = 5, y = 3, z = 2;
int result = x + y * z;
cout << result;

Select one of the following options:
16
11
13
10

Correct Answer:

11
Explanation:
The correct output is 11. This is due to operator precedence in C++. Multiplication (*) has higher precedence than addition (+). So, y * z is evaluated first (3 * 2 = 6), and then x is added to the result (5 + 6 = 11). If we wanted to force the addition to happen first, we would need to use parentheses: (x + y) * z.

3. Control Structure Behavior
What will be the output of this code?

int x = 10;
if (x > 5)
    cout << "A";
else if (x > 7)
    cout << "B";
else
    cout << "C";

Select one of the following options:
A
B
C
AB

Correct Answer:

A
Explanation:
The output will be 'A'. In an if-else if-else structure, as soon as a condition is true, its corresponding block is executed and the rest of the structure is skipped. Here, the first condition (x > 5) is true because x is 10, so 'A' is printed. Even though x > 7 is also true, that condition is never checked because the first condition was already satisfied.

4. Loop Execution
How many times will the following loop execute?

for (int i = 0; i < 5; i += 2) {
    cout << i << " ";
}

Select one of the following options:
2 times
3 times
5 times
6 times

Correct Answer:

3 times
Explanation:
The loop will execute 3 times. It starts with i = 0, then i becomes 2, and finally 4. When i becomes 6, the condition i < 5 is false, so the loop terminates. The output would be '0 2 4'. It's important to note that the loop condition is checked before each iteration, and the increment (i += 2) happens at the end of each iteration.

5. Function Overloading
Which of the following is NOT a valid way to overload a function in C++?

Select one of the following options:
Changing the number of parameters
Changing the types of parameters
Changing the return type only
Changing the order of parameters

Correct Answer:

Changing the return type only
Explanation:
Changing only the return type is not a valid way to overload a function in C++. Function overloading is based on the function's signature, which includes the function name and the parameter list (number, types, and order of parameters). The return type is not part of the function signature. Therefore, two functions that differ only in return type are not considered overloaded functions and will result in a compilation error.

6. Variable Scope
What will be the output of this code?

int x = 5;
void func() {
    int x = 10;
    cout << x << " ";
}
int main() {
    func();
    cout << x;
    return 0;
}

Select one of the following options:
5 5
10 5
10 10
5 10


Correct Answer:

10 5
Explanation:
The output will be '10 5'. This demonstrates variable scope in C++. The x declared inside func() is a local variable that shadows the global x. When cout << x is called inside func(), it refers to the local x, which is 10. However, in main(), the cout << x refers to the global x, which is 5. Each variable is only accessible within its own scope.


7. Switch Statement Behavior
What is the output of this switch statement?

int x = 2;
switch(x) {
    case 1:
        cout << "One";
    case 2:
        cout << "Two";
    case 3:
        cout << "Three";
        break;
    default:
        cout << "Default";
}


Select one of the following options:
Two
TwoThree
One
Default

Correct Answer:

TwoThree
Explanation:
The output will be 'TwoThree'. In a switch statement, once a matching case is found, execution continues through subsequent cases until a break statement is encountered. This behavior is called 'fall-through'. Here, x is 2, so execution starts at case 2, prints 'Two', then falls through to case 3, prints 'Three', and then encounters a break, ending the switch statement. To prevent fall-through, each case should typically end with a break statement.

8. Reference Variable
What will be the output of this code?

int x = 5;
int& y = x;
y++;
cout << x << " " << y;

Select one of the following options:
5 6
6 6
5 5
6 5

Correct Answer:

6 6
Explanation:
The output will be '6 6'. In this code, y is declared as a reference to x. This means y is an alias for x; they refer to the same memory location. When we increment y, we're actually incrementing x. Therefore, both x and y are increased to 6. References in C++ provide a way to create an alternative name for an existing variable, and any changes made through the reference affect the original variable.

9. Const Keyword Usage
Which of the following is a correct way to declare a constant integer in C++?

Select one of the following options:
const int x;
int const x;
const int x = 10;
const x = 10;

Correct Answer:

const int x = 10;
Explanation:
The correct way to declare a constant integer in C++ is 'const int x = 10;'. The const keyword in C++ is used to declare constants, which are variables whose values cannot be modified after initialization. When using const, you must initialize the variable at the time of declaration. Both 'const int x;' and 'int const x;' are syntactically correct, but they don't provide an initial value, which is required for constants. 'const x = 10;' is incorrect because it doesn't specify the type of x.

10. Ternary Operator
What does this code output?

int x = 5, y = 10;
cout << (x < y ? "Less" : "Greater or Equal");

Select one of the following options:
Less
Greater or Equal
5
10

Correct Answer:

Less
Explanation:
The output will be 'Less'. This code demonstrates the use of the ternary operator (?:) in C++. The ternary operator is a shorthand way of writing an if-else statement. Its syntax is (condition ? value_if_true : value_if_false). In this case, the condition x < y is true (5 is less than 10), so the expression evaluates to the string 'Less'. If x were not less than y, it would output 'Greater or Equal'.







